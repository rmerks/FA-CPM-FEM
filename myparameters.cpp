/*
 *
 *  This file is part of the Virtual Leaf.
 *
 *  VirtualLeaf is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  VirtualLeaf is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with the Virtual Leaf.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  Copyright 2010 Roeland Merks.
 *
 */

// WARNING: This file is automatically generated by make_parameter_source.pl.
// Do not edit. All edits will be discarded.

#include "myparameters.h"
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cerrno>
#include <iostream>
#include <sstream>
#include "output.h"
#include "parse.h"
//#include "xmlwrite.h"
#include "warning.h"
#include <QLocale>
#include <QDir>
#include <QStringList>
#include <sys/stat.h>
#include <sys/types.h>

using namespace std;

static const std::string _module_id("$Id$");

Parameter::Parameter() {
  SEED = 0;
  NVX = 200;
  NVY = 200;
  MCS = NVX*NVY;
  INSERTMEDIUM = false;
  VOXSIZE = 0.0000025;
  NRINC = 2001;
  MAXNRITER = 1000;
  RELAXTIME = 0;
  ACCURACY = 0.000001;
  YOUNGS = 10000;
  YOUNGSNOISE = 1000;
  POISSON = 0.45;
  THICKNESS = 1e-6;
  VISC = 1e-7;
  GLOBALSTRAIN = false;
  CYCLIC = true;
  PERIOD = 10;
  LOADANGLE = 45;
  LOAD = 4000;
  MOTILITY = 2;
  CLASSICCPM = true;
  TARGETVOLUME = 0;
  INELASTICITY = 0.0002;
  INELASTICITY2 = 0.01;
  LEMMONROMER = true;
  NODECONNECTION = true;
  LRTENSION = 0.001;
  NBHRAD = 10;
  TWOCELLTYPES = false;
  NOSTICKJCM = 2500;
  NOSTICKJCC = 0;
  NOSTICKJCM2 = 1;
  NOSTICKJCC2 = 1.5;
  NOSTICKJCCb = 1.5;
  LAMBDAADHESION = 600;
  MAXAREA = 1000;
  LAMBDAFA = 4;
  LAMBDAPLAQUE = 1;
  FAH = 20000;
  CONFSTRESS = 5000;
  FORCEFA = true;
  LAMBDAFORCEFA = 0;
  LAMBDAACTIN = 0.1;
  ACTIN = false;
  COLLAGEN = 1;
  COLLAGENSPEED = 0;
  PDEdt = 0.01;
  PDEREPEAT = 1000;
  CAPACITYFA = 10000000;
  BASEFA = 5000;
  GROWTHFA = 0.05;
  LOGISTICPAR = 1;
  CATCHTENSION = 4.02;
  SLIPTENSION = 7.78;
  PIXPERVOX = 10;
  LINEWIDTH = 2;
  STRIDE = 250;
  WSTRIDE = 10;
  COLLAGENFIELD = false;
  STRAINFIELD = false;
  STRESSFIELD = true;
  HYDSTRESS = true;
  STRESSTENSOR = false;
  TRACTIONSTRESSFIELD = false;
  FORCEFIELD = false;
  TENSIONFIELD = false;
  MAXFORCE = 0.005;
  DEFORMFIELD = false;
  MAXDEFORM = 0.0001;
  FAFIELD = true;
  FACOLOUR = false;
  MAXFA = 20000;
  PRINCFIELD = false;
  CELLCOLOUR = true;
  ONECELL = false;
  TWOCELL = false;
  DISTWOCELLS = 20;
  CELLCOL = false;
  READCELLS = true;
  CELLDENSITY = 0.001;
  CELLDIS = 20;
  BOUNDARYDIS = 25;
  FORBIDDENZONE = 0;
  PATTERN = false;
  PATTERNC = 5;
  DUROTAXIS = false;
  GRADIENT = 100;
  NRcf = 0;
  COLORBAR = true;
  MAXCOLORBARSTRAIN = 0;
  MAXCOLORBARDENS = 2000;
  MAXCOLORBARSTRESS = 0;
  WIDTHCOLORBAR = 0;
  WRATIOPA = false;
  WLENGTH = true;
  WAREA = true;
  WSQDIS = true;
  WECC = true;
  WANGLE = true;
  WSIGMA = true;
  WTOTSHAPE = false;
  WFA = true;
  WTWOCELLCONTACT = false;
  WTWOCELLANGLECM = false;
}

Parameter::~Parameter() {
    
// destruct parameter object
// free string parameter
CleanUp();
}

void Parameter::CleanUp(void) {

}

void Parameter::Read(const char *filename) {
    
  static bool ReadP=false;

  if (ReadP) {

    //throw "Run Time Error in myparameters.cpp: Please Read parameter file only once!!";
    CleanUp();
	
  } else
    ReadP=true;

  FILE *fp=OpenReadFile(filename);


  SEED = igetpar(fp, "SEED", 0, true);
  NVX = igetpar(fp, "NVX", 200, true);
  NVY = igetpar(fp, "NVY", 200, true);
  MCS = igetpar(fp, "MCS", NVX*NVY, true);
  INSERTMEDIUM = bgetpar(fp, "INSERTMEDIUM", false, true);
  VOXSIZE = fgetpar(fp, "VOXSIZE", 0.0000025, true);
  NRINC = igetpar(fp, "NRINC", 2001, true);
  MAXNRITER = igetpar(fp, "MAXNRITER", 1000, true);
  RELAXTIME = igetpar(fp, "RELAXTIME", 0, true);
  ACCURACY = fgetpar(fp, "ACCURACY", 0.000001, true);
  YOUNGS = fgetpar(fp, "YOUNGS", 10000, true);
  YOUNGSNOISE = fgetpar(fp, "YOUNGSNOISE", 1000, true);
  POISSON = fgetpar(fp, "POISSON", 0.45, true);
  THICKNESS = fgetpar(fp, "THICKNESS", 1e-6, true);
  VISC = fgetpar(fp, "VISC", 1e-7, true);
  GLOBALSTRAIN = bgetpar(fp, "GLOBALSTRAIN", false, true);
  CYCLIC = bgetpar(fp, "CYCLIC", true, true);
  PERIOD = igetpar(fp, "PERIOD", 10, true);
  LOADANGLE = fgetpar(fp, "LOADANGLE", 45, true);
  LOAD = fgetpar(fp, "LOAD", 4000, true);
  MOTILITY = fgetpar(fp, "MOTILITY", 2, true);
  CLASSICCPM = bgetpar(fp, "CLASSICCPM", true, true);
  TARGETVOLUME = fgetpar(fp, "TARGETVOLUME", 0, true);
  INELASTICITY = fgetpar(fp, "INELASTICITY", 0.0002, true);
  INELASTICITY2 = fgetpar(fp, "INELASTICITY2", 0.01, true);
  LEMMONROMER = bgetpar(fp, "LEMMONROMER", true, true);
  NODECONNECTION = bgetpar(fp, "NODECONNECTION", true, true);
  LRTENSION = fgetpar(fp, "LRTENSION", 0.001, true);
  NBHRAD = igetpar(fp, "NBHRAD", 10, true);
  TWOCELLTYPES = bgetpar(fp, "TWOCELLTYPES", false, true);
  NOSTICKJCM = fgetpar(fp, "NOSTICKJCM", 2500, true);
  NOSTICKJCC = fgetpar(fp, "NOSTICKJCC", 0, true);
  NOSTICKJCM2 = fgetpar(fp, "NOSTICKJCM2", 1, true);
  NOSTICKJCC2 = fgetpar(fp, "NOSTICKJCC2", 1.5, true);
  NOSTICKJCCb = fgetpar(fp, "NOSTICKJCCb", 1.5, true);
  LAMBDAADHESION = fgetpar(fp, "LAMBDAADHESION", 600, true);
  MAXAREA = fgetpar(fp, "MAXAREA", 1000, true);
  LAMBDAFA = fgetpar(fp, "LAMBDAFA", 4, true);
  LAMBDAPLAQUE = fgetpar(fp, "LAMBDAPLAQUE", 1, true);
  FAH = fgetpar(fp, "FAH", 20000, true);
  CONFSTRESS = fgetpar(fp, "CONFSTRESS", 5000, true);
  FORCEFA = bgetpar(fp, "FORCEFA", true, true);
  LAMBDAFORCEFA = fgetpar(fp, "LAMBDAFORCEFA", 0, true);
  LAMBDAACTIN = fgetpar(fp, "LAMBDAACTIN", 0.1, true);
  ACTIN = bgetpar(fp, "ACTIN", false, true);
  COLLAGEN = fgetpar(fp, "COLLAGEN", 1, true);
  COLLAGENSPEED = fgetpar(fp, "COLLAGENSPEED", 0, true);
  PDEdt = fgetpar(fp, "PDEdt", 0.01, true);
  PDEREPEAT = fgetpar(fp, "PDEREPEAT", 1000, true);
  CAPACITYFA = fgetpar(fp, "CAPACITYFA", 10000000, true);
  BASEFA = fgetpar(fp, "BASEFA", 5000, true);
  GROWTHFA = fgetpar(fp, "GROWTHFA", 0.05, true);
  LOGISTICPAR = fgetpar(fp, "LOGISTICPAR", 1, true);
  CATCHTENSION = fgetpar(fp, "CATCHTENSION", 4.02, true);
  SLIPTENSION = fgetpar(fp, "SLIPTENSION", 7.78, true);
  PIXPERVOX = igetpar(fp, "PIXPERVOX", 10, true);
  LINEWIDTH = igetpar(fp, "LINEWIDTH", 2, true);
  STRIDE = igetpar(fp, "STRIDE", 250, true);
  WSTRIDE = igetpar(fp, "WSTRIDE", 10, true);
  COLLAGENFIELD = bgetpar(fp, "COLLAGENFIELD", false, true);
  STRAINFIELD = bgetpar(fp, "STRAINFIELD", false, true);
  STRESSFIELD = bgetpar(fp, "STRESSFIELD", true, true);
  HYDSTRESS = bgetpar(fp, "HYDSTRESS", true, true);
  STRESSTENSOR = bgetpar(fp, "STRESSTENSOR", false, true);
  TRACTIONSTRESSFIELD = bgetpar(fp, "TRACTIONSTRESSFIELD", false, true);
  FORCEFIELD = bgetpar(fp, "FORCEFIELD", false, true);
  TENSIONFIELD = bgetpar(fp, "TENSIONFIELD", false, true);
  MAXFORCE = fgetpar(fp, "MAXFORCE", 0.005, true);
  DEFORMFIELD = bgetpar(fp, "DEFORMFIELD", false, true);
  MAXDEFORM = fgetpar(fp, "MAXDEFORM", 0.0001, true);
  FAFIELD = bgetpar(fp, "FAFIELD", true, true);
  FACOLOUR = bgetpar(fp, "FACOLOUR", false, true);
  MAXFA = fgetpar(fp, "MAXFA", 20000, true);
  PRINCFIELD = bgetpar(fp, "PRINCFIELD", false, true);
  CELLCOLOUR = bgetpar(fp, "CELLCOLOUR", true, true);
  ONECELL = bgetpar(fp, "ONECELL", false, true);
  TWOCELL = bgetpar(fp, "TWOCELL", false, true);
  DISTWOCELLS = igetpar(fp, "DISTWOCELLS", 20, true);
  CELLCOL = bgetpar(fp, "CELLCOL", false, true);
  READCELLS = bgetpar(fp, "READCELLS", true, true);
  CELLDENSITY = fgetpar(fp, "CELLDENSITY", 0.001, true);
  CELLDIS = igetpar(fp, "CELLDIS", 20, true);
  BOUNDARYDIS = igetpar(fp, "BOUNDARYDIS", 25, true);
  FORBIDDENZONE = igetpar(fp, "FORBIDDENZONE", 0, true);
  PATTERN = bgetpar(fp, "PATTERN", false, true);
  PATTERNC = igetpar(fp, "PATTERNC", 5, true);
  DUROTAXIS = bgetpar(fp, "DUROTAXIS", false, true);
  GRADIENT = fgetpar(fp, "GRADIENT", 100, true);
  NRcf = igetpar(fp, "NRcf", 0, true);
  COLORBAR = bgetpar(fp, "COLORBAR", true, true);
  MAXCOLORBARSTRAIN = fgetpar(fp, "MAXCOLORBARSTRAIN", 0, true);
  MAXCOLORBARDENS = fgetpar(fp, "MAXCOLORBARDENS", 2000, true);
  MAXCOLORBARSTRESS = fgetpar(fp, "MAXCOLORBARSTRESS", 0, true);
  WIDTHCOLORBAR = igetpar(fp, "WIDTHCOLORBAR", 0, true);
  WRATIOPA = bgetpar(fp, "WRATIOPA", false, true);
  WLENGTH = bgetpar(fp, "WLENGTH", true, true);
  WAREA = bgetpar(fp, "WAREA", true, true);
  WSQDIS = bgetpar(fp, "WSQDIS", true, true);
  WECC = bgetpar(fp, "WECC", true, true);
  WANGLE = bgetpar(fp, "WANGLE", true, true);
  WSIGMA = bgetpar(fp, "WSIGMA", true, true);
  WTOTSHAPE = bgetpar(fp, "WTOTSHAPE", false, true);
  WFA = bgetpar(fp, "WFA", true, true);
  WTWOCELLCONTACT = bgetpar(fp, "WTWOCELLCONTACT", false, true);
  WTWOCELLANGLECM = bgetpar(fp, "WTWOCELLANGLECM", false, true);
}

const char *sbool(const bool &p) {

  const char *true_str="true";
  const char *false_str="false";
  if (p)
    return true_str;
  else
    return false_str;
}

void Parameter::Write(ostream &os) const {

  os << " SEED = " << SEED << endl;
  os << " NVX = " << NVX << endl;
  os << " NVY = " << NVY << endl;
  os << " MCS = " << MCS << endl;
  os << " INSERTMEDIUM = " << sbool(INSERTMEDIUM) << endl;
  os << " VOXSIZE = " << VOXSIZE << endl;
  os << " NRINC = " << NRINC << endl;
  os << " MAXNRITER = " << MAXNRITER << endl;
  os << " RELAXTIME = " << RELAXTIME << endl;
  os << " ACCURACY = " << ACCURACY << endl;
  os << " YOUNGS = " << YOUNGS << endl;
  os << " YOUNGSNOISE = " << YOUNGSNOISE << endl;
  os << " POISSON = " << POISSON << endl;
  os << " THICKNESS = " << THICKNESS << endl;
  os << " VISC = " << VISC << endl;
  os << " GLOBALSTRAIN = " << sbool(GLOBALSTRAIN) << endl;
  os << " CYCLIC = " << sbool(CYCLIC) << endl;
  os << " PERIOD = " << PERIOD << endl;
  os << " LOADANGLE = " << LOADANGLE << endl;
  os << " LOAD = " << LOAD << endl;
  os << " MOTILITY = " << MOTILITY << endl;
  os << " CLASSICCPM = " << sbool(CLASSICCPM) << endl;
  os << " TARGETVOLUME = " << TARGETVOLUME << endl;
  os << " INELASTICITY = " << INELASTICITY << endl;
  os << " INELASTICITY2 = " << INELASTICITY2 << endl;
  os << " LEMMONROMER = " << sbool(LEMMONROMER) << endl;
  os << " NODECONNECTION = " << sbool(NODECONNECTION) << endl;
  os << " LRTENSION = " << LRTENSION << endl;
  os << " NBHRAD = " << NBHRAD << endl;
  os << " TWOCELLTYPES = " << sbool(TWOCELLTYPES) << endl;
  os << " NOSTICKJCM = " << NOSTICKJCM << endl;
  os << " NOSTICKJCC = " << NOSTICKJCC << endl;
  os << " NOSTICKJCM2 = " << NOSTICKJCM2 << endl;
  os << " NOSTICKJCC2 = " << NOSTICKJCC2 << endl;
  os << " NOSTICKJCCb = " << NOSTICKJCCb << endl;
  os << " LAMBDAADHESION = " << LAMBDAADHESION << endl;
  os << " MAXAREA = " << MAXAREA << endl;
  os << " LAMBDAFA = " << LAMBDAFA << endl;
  os << " LAMBDAPLAQUE = " << LAMBDAPLAQUE << endl;
  os << " FAH = " << FAH << endl;
  os << " CONFSTRESS = " << CONFSTRESS << endl;
  os << " FORCEFA = " << sbool(FORCEFA) << endl;
  os << " LAMBDAFORCEFA = " << LAMBDAFORCEFA << endl;
  os << " LAMBDAACTIN = " << LAMBDAACTIN << endl;
  os << " ACTIN = " << sbool(ACTIN) << endl;
  os << " COLLAGEN = " << COLLAGEN << endl;
  os << " COLLAGENSPEED = " << COLLAGENSPEED << endl;
  os << " PDEdt = " << PDEdt << endl;
  os << " PDEREPEAT = " << PDEREPEAT << endl;
  os << " CAPACITYFA = " << CAPACITYFA << endl;
  os << " BASEFA = " << BASEFA << endl;
  os << " GROWTHFA = " << GROWTHFA << endl;
  os << " LOGISTICPAR = " << LOGISTICPAR << endl;
  os << " CATCHTENSION = " << CATCHTENSION << endl;
  os << " SLIPTENSION = " << SLIPTENSION << endl;
  os << " PIXPERVOX = " << PIXPERVOX << endl;
  os << " LINEWIDTH = " << LINEWIDTH << endl;
  os << " STRIDE = " << STRIDE << endl;
  os << " WSTRIDE = " << WSTRIDE << endl;
  os << " COLLAGENFIELD = " << sbool(COLLAGENFIELD) << endl;
  os << " STRAINFIELD = " << sbool(STRAINFIELD) << endl;
  os << " STRESSFIELD = " << sbool(STRESSFIELD) << endl;
  os << " HYDSTRESS = " << sbool(HYDSTRESS) << endl;
  os << " STRESSTENSOR = " << sbool(STRESSTENSOR) << endl;
  os << " TRACTIONSTRESSFIELD = " << sbool(TRACTIONSTRESSFIELD) << endl;
  os << " FORCEFIELD = " << sbool(FORCEFIELD) << endl;
  os << " TENSIONFIELD = " << sbool(TENSIONFIELD) << endl;
  os << " MAXFORCE = " << MAXFORCE << endl;
  os << " DEFORMFIELD = " << sbool(DEFORMFIELD) << endl;
  os << " MAXDEFORM = " << MAXDEFORM << endl;
  os << " FAFIELD = " << sbool(FAFIELD) << endl;
  os << " FACOLOUR = " << sbool(FACOLOUR) << endl;
  os << " MAXFA = " << MAXFA << endl;
  os << " PRINCFIELD = " << sbool(PRINCFIELD) << endl;
  os << " CELLCOLOUR = " << sbool(CELLCOLOUR) << endl;
  os << " ONECELL = " << sbool(ONECELL) << endl;
  os << " TWOCELL = " << sbool(TWOCELL) << endl;
  os << " DISTWOCELLS = " << DISTWOCELLS << endl;
  os << " CELLCOL = " << sbool(CELLCOL) << endl;
  os << " READCELLS = " << sbool(READCELLS) << endl;
  os << " CELLDENSITY = " << CELLDENSITY << endl;
  os << " CELLDIS = " << CELLDIS << endl;
  os << " BOUNDARYDIS = " << BOUNDARYDIS << endl;
  os << " FORBIDDENZONE = " << FORBIDDENZONE << endl;
  os << " PATTERN = " << sbool(PATTERN) << endl;
  os << " PATTERNC = " << PATTERNC << endl;
  os << " DUROTAXIS = " << sbool(DUROTAXIS) << endl;
  os << " GRADIENT = " << GRADIENT << endl;
  os << " NRcf = " << NRcf << endl;
  os << " COLORBAR = " << sbool(COLORBAR) << endl;
  os << " MAXCOLORBARSTRAIN = " << MAXCOLORBARSTRAIN << endl;
  os << " MAXCOLORBARDENS = " << MAXCOLORBARDENS << endl;
  os << " MAXCOLORBARSTRESS = " << MAXCOLORBARSTRESS << endl;
  os << " WIDTHCOLORBAR = " << WIDTHCOLORBAR << endl;
  os << " WRATIOPA = " << sbool(WRATIOPA) << endl;
  os << " WLENGTH = " << sbool(WLENGTH) << endl;
  os << " WAREA = " << sbool(WAREA) << endl;
  os << " WSQDIS = " << sbool(WSQDIS) << endl;
  os << " WECC = " << sbool(WECC) << endl;
  os << " WANGLE = " << sbool(WANGLE) << endl;
  os << " WSIGMA = " << sbool(WSIGMA) << endl;
  os << " WTOTSHAPE = " << sbool(WTOTSHAPE) << endl;
  os << " WFA = " << sbool(WFA) << endl;
  os << " WTWOCELLCONTACT = " << sbool(WTWOCELLCONTACT) << endl;
  os << " WTWOCELLANGLECM = " << sbool(WTWOCELLANGLECM) << endl;
}
/*
void Parameter::XMLAdd(xmlNode *root) const {
    xmlNode *xmlparameter = xmlNewChild(root, NULL, BAD_CAST "parameter", NULL);
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "SEED" );
  ostringstream text;
    text << SEED;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NVX" );
  ostringstream text;
    text << NVX;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NVY" );
  ostringstream text;
    text << NVY;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "MCS" );
  ostringstream text;
    text << MCS;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "INSERTMEDIUM" );
  ostringstream text;
text << sbool(INSERTMEDIUM);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "VOXSIZE" );
  ostringstream text;
    text << VOXSIZE;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NRINC" );
  ostringstream text;
    text << NRINC;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "MAXNRITER" );
  ostringstream text;
    text << MAXNRITER;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "RELAXTIME" );
  ostringstream text;
    text << RELAXTIME;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "ACCURACY" );
  ostringstream text;
    text << ACCURACY;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "YOUNGS" );
  ostringstream text;
    text << YOUNGS;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "YOUNGSNOISE" );
  ostringstream text;
    text << YOUNGSNOISE;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "POISSON" );
  ostringstream text;
    text << POISSON;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "THICKNESS" );
  ostringstream text;
    text << THICKNESS;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "VISC" );
  ostringstream text;
    text << VISC;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "GLOBALSTRAIN" );
  ostringstream text;
text << sbool(GLOBALSTRAIN);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "CYCLIC" );
  ostringstream text;
text << sbool(CYCLIC);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "PERIOD" );
  ostringstream text;
    text << PERIOD;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LOADANGLE" );
  ostringstream text;
    text << LOADANGLE;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LOAD" );
  ostringstream text;
    text << LOAD;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "MOTILITY" );
  ostringstream text;
    text << MOTILITY;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "CLASSICCPM" );
  ostringstream text;
text << sbool(CLASSICCPM);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "TARGETVOLUME" );
  ostringstream text;
    text << TARGETVOLUME;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "INELASTICITY" );
  ostringstream text;
    text << INELASTICITY;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "INELASTICITY2" );
  ostringstream text;
    text << INELASTICITY2;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LEMMONROMER" );
  ostringstream text;
text << sbool(LEMMONROMER);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NODECONNECTION" );
  ostringstream text;
text << sbool(NODECONNECTION);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LRTENSION" );
  ostringstream text;
    text << LRTENSION;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NBHRAD" );
  ostringstream text;
    text << NBHRAD;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "TWOCELLTYPES" );
  ostringstream text;
text << sbool(TWOCELLTYPES);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NOSTICKJCM" );
  ostringstream text;
    text << NOSTICKJCM;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NOSTICKJCC" );
  ostringstream text;
    text << NOSTICKJCC;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NOSTICKJCM2" );
  ostringstream text;
    text << NOSTICKJCM2;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NOSTICKJCC2" );
  ostringstream text;
    text << NOSTICKJCC2;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NOSTICKJCCb" );
  ostringstream text;
    text << NOSTICKJCCb;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LAMBDAADHESION" );
  ostringstream text;
    text << LAMBDAADHESION;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "MAXAREA" );
  ostringstream text;
    text << MAXAREA;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LAMBDAFA" );
  ostringstream text;
    text << LAMBDAFA;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LAMBDAPLAQUE" );
  ostringstream text;
    text << LAMBDAPLAQUE;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "FAH" );
  ostringstream text;
    text << FAH;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "CONFSTRESS" );
  ostringstream text;
    text << CONFSTRESS;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "FORCEFA" );
  ostringstream text;
text << sbool(FORCEFA);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LAMBDAFORCEFA" );
  ostringstream text;
    text << LAMBDAFORCEFA;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LAMBDAACTIN" );
  ostringstream text;
    text << LAMBDAACTIN;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "ACTIN" );
  ostringstream text;
text << sbool(ACTIN);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "COLLAGEN" );
  ostringstream text;
    text << COLLAGEN;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "COLLAGENSPEED" );
  ostringstream text;
    text << COLLAGENSPEED;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "PDEdt" );
  ostringstream text;
    text << PDEdt;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "PDEREPEAT" );
  ostringstream text;
    text << PDEREPEAT;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "CAPACITYFA" );
  ostringstream text;
    text << CAPACITYFA;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "BASEFA" );
  ostringstream text;
    text << BASEFA;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "GROWTHFA" );
  ostringstream text;
    text << GROWTHFA;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LOGISTICPAR" );
  ostringstream text;
    text << LOGISTICPAR;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "CATCHTENSION" );
  ostringstream text;
    text << CATCHTENSION;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "SLIPTENSION" );
  ostringstream text;
    text << SLIPTENSION;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "PIXPERVOX" );
  ostringstream text;
    text << PIXPERVOX;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "LINEWIDTH" );
  ostringstream text;
    text << LINEWIDTH;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "STRIDE" );
  ostringstream text;
    text << STRIDE;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WSTRIDE" );
  ostringstream text;
    text << WSTRIDE;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "COLLAGENFIELD" );
  ostringstream text;
text << sbool(COLLAGENFIELD);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "STRAINFIELD" );
  ostringstream text;
text << sbool(STRAINFIELD);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "STRESSFIELD" );
  ostringstream text;
text << sbool(STRESSFIELD);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "HYDSTRESS" );
  ostringstream text;
text << sbool(HYDSTRESS);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "STRESSTENSOR" );
  ostringstream text;
text << sbool(STRESSTENSOR);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "TRACTIONSTRESSFIELD" );
  ostringstream text;
text << sbool(TRACTIONSTRESSFIELD);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "FORCEFIELD" );
  ostringstream text;
text << sbool(FORCEFIELD);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "TENSIONFIELD" );
  ostringstream text;
text << sbool(TENSIONFIELD);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "MAXFORCE" );
  ostringstream text;
    text << MAXFORCE;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "DEFORMFIELD" );
  ostringstream text;
text << sbool(DEFORMFIELD);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "MAXDEFORM" );
  ostringstream text;
    text << MAXDEFORM;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "FAFIELD" );
  ostringstream text;
text << sbool(FAFIELD);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "FACOLOUR" );
  ostringstream text;
text << sbool(FACOLOUR);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "MAXFA" );
  ostringstream text;
    text << MAXFA;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "PRINCFIELD" );
  ostringstream text;
text << sbool(PRINCFIELD);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "CELLCOLOUR" );
  ostringstream text;
text << sbool(CELLCOLOUR);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "ONECELL" );
  ostringstream text;
text << sbool(ONECELL);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "TWOCELL" );
  ostringstream text;
text << sbool(TWOCELL);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "DISTWOCELLS" );
  ostringstream text;
    text << DISTWOCELLS;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "CELLCOL" );
  ostringstream text;
text << sbool(CELLCOL);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "READCELLS" );
  ostringstream text;
text << sbool(READCELLS);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "CELLDENSITY" );
  ostringstream text;
    text << CELLDENSITY;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "CELLDIS" );
  ostringstream text;
    text << CELLDIS;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "BOUNDARYDIS" );
  ostringstream text;
    text << BOUNDARYDIS;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "FORBIDDENZONE" );
  ostringstream text;
    text << FORBIDDENZONE;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "PATTERN" );
  ostringstream text;
text << sbool(PATTERN);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "PATTERNC" );
  ostringstream text;
    text << PATTERNC;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "DUROTAXIS" );
  ostringstream text;
text << sbool(DUROTAXIS);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "GRADIENT" );
  ostringstream text;
    text << GRADIENT;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "NRcf" );
  ostringstream text;
    text << NRcf;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "COLORBAR" );
  ostringstream text;
text << sbool(COLORBAR);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "MAXCOLORBARSTRAIN" );
  ostringstream text;
    text << MAXCOLORBARSTRAIN;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "MAXCOLORBARDENS" );
  ostringstream text;
    text << MAXCOLORBARDENS;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "MAXCOLORBARSTRESS" );
  ostringstream text;
    text << MAXCOLORBARSTRESS;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WIDTHCOLORBAR" );
  ostringstream text;
    text << WIDTHCOLORBAR;
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WRATIOPA" );
  ostringstream text;
text << sbool(WRATIOPA);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WLENGTH" );
  ostringstream text;
text << sbool(WLENGTH);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WAREA" );
  ostringstream text;
text << sbool(WAREA);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WSQDIS" );
  ostringstream text;
text << sbool(WSQDIS);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WECC" );
  ostringstream text;
text << sbool(WECC);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WANGLE" );
  ostringstream text;
text << sbool(WANGLE);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WSIGMA" );
  ostringstream text;
text << sbool(WSIGMA);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WTOTSHAPE" );
  ostringstream text;
text << sbool(WTOTSHAPE);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WFA" );
  ostringstream text;
text << sbool(WFA);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WTWOCELLCONTACT" );
  ostringstream text;
text << sbool(WTWOCELLCONTACT);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
{
  xmlNode *xmlpar = xmlNewChild(xmlparameter, NULL, BAD_CAST "par", NULL);
  xmlNewProp(xmlpar, BAD_CAST "name", BAD_CAST "WTWOCELLANGLECM" );
  ostringstream text;
text << sbool(WTWOCELLANGLECM);
xmlNewProp(xmlpar, BAD_CAST "val", BAD_CAST text.str().c_str());
}
}
void Parameter::AssignValToPar(const char *namec, const char *valc) {
  QLocale standardlocale(QLocale::C);
  bool ok;
if (!strcmp(namec, "SEED")) {
  SEED = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'SEED' from XML file.",valc); }
}
if (!strcmp(namec, "NVX")) {
  NVX = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'NVX' from XML file.",valc); }
}
if (!strcmp(namec, "NVY")) {
  NVY = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'NVY' from XML file.",valc); }
}
if (!strcmp(namec, "MCS")) {
  MCS = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'MCS' from XML file.",valc); }
}
if (!strcmp(namec, "INSERTMEDIUM")) {
INSERTMEDIUM = strtobool(valc);
}
if (!strcmp(namec, "VOXSIZE")) {
  VOXSIZE = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'VOXSIZE' from XML file.",valc); }
}
if (!strcmp(namec, "NRINC")) {
  NRINC = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'NRINC' from XML file.",valc); }
}
if (!strcmp(namec, "MAXNRITER")) {
  MAXNRITER = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'MAXNRITER' from XML file.",valc); }
}
if (!strcmp(namec, "RELAXTIME")) {
  RELAXTIME = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'RELAXTIME' from XML file.",valc); }
}
if (!strcmp(namec, "ACCURACY")) {
  ACCURACY = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'ACCURACY' from XML file.",valc); }
}
if (!strcmp(namec, "YOUNGS")) {
  YOUNGS = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'YOUNGS' from XML file.",valc); }
}
if (!strcmp(namec, "YOUNGSNOISE")) {
  YOUNGSNOISE = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'YOUNGSNOISE' from XML file.",valc); }
}
if (!strcmp(namec, "POISSON")) {
  POISSON = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'POISSON' from XML file.",valc); }
}
if (!strcmp(namec, "THICKNESS")) {
  THICKNESS = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'THICKNESS' from XML file.",valc); }
}
if (!strcmp(namec, "VISC")) {
  VISC = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'VISC' from XML file.",valc); }
}
if (!strcmp(namec, "GLOBALSTRAIN")) {
GLOBALSTRAIN = strtobool(valc);
}
if (!strcmp(namec, "CYCLIC")) {
CYCLIC = strtobool(valc);
}
if (!strcmp(namec, "PERIOD")) {
  PERIOD = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'PERIOD' from XML file.",valc); }
}
if (!strcmp(namec, "LOADANGLE")) {
  LOADANGLE = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'LOADANGLE' from XML file.",valc); }
}
if (!strcmp(namec, "LOAD")) {
  LOAD = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'LOAD' from XML file.",valc); }
}
if (!strcmp(namec, "MOTILITY")) {
  MOTILITY = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'MOTILITY' from XML file.",valc); }
}
if (!strcmp(namec, "CLASSICCPM")) {
CLASSICCPM = strtobool(valc);
}
if (!strcmp(namec, "TARGETVOLUME")) {
  TARGETVOLUME = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'TARGETVOLUME' from XML file.",valc); }
}
if (!strcmp(namec, "INELASTICITY")) {
  INELASTICITY = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'INELASTICITY' from XML file.",valc); }
}
if (!strcmp(namec, "INELASTICITY2")) {
  INELASTICITY2 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'INELASTICITY2' from XML file.",valc); }
}
if (!strcmp(namec, "LEMMONROMER")) {
LEMMONROMER = strtobool(valc);
}
if (!strcmp(namec, "NODECONNECTION")) {
NODECONNECTION = strtobool(valc);
}
if (!strcmp(namec, "LRTENSION")) {
  LRTENSION = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'LRTENSION' from XML file.",valc); }
}
if (!strcmp(namec, "NBHRAD")) {
  NBHRAD = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'NBHRAD' from XML file.",valc); }
}
if (!strcmp(namec, "TWOCELLTYPES")) {
TWOCELLTYPES = strtobool(valc);
}
if (!strcmp(namec, "NOSTICKJCM")) {
  NOSTICKJCM = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'NOSTICKJCM' from XML file.",valc); }
}
if (!strcmp(namec, "NOSTICKJCC")) {
  NOSTICKJCC = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'NOSTICKJCC' from XML file.",valc); }
}
if (!strcmp(namec, "NOSTICKJCM2")) {
  NOSTICKJCM2 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'NOSTICKJCM2' from XML file.",valc); }
}
if (!strcmp(namec, "NOSTICKJCC2")) {
  NOSTICKJCC2 = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'NOSTICKJCC2' from XML file.",valc); }
}
if (!strcmp(namec, "NOSTICKJCCb")) {
  NOSTICKJCCb = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'NOSTICKJCCb' from XML file.",valc); }
}
if (!strcmp(namec, "LAMBDAADHESION")) {
  LAMBDAADHESION = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'LAMBDAADHESION' from XML file.",valc); }
}
if (!strcmp(namec, "MAXAREA")) {
  MAXAREA = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'MAXAREA' from XML file.",valc); }
}
if (!strcmp(namec, "LAMBDAFA")) {
  LAMBDAFA = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'LAMBDAFA' from XML file.",valc); }
}
if (!strcmp(namec, "LAMBDAPLAQUE")) {
  LAMBDAPLAQUE = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'LAMBDAPLAQUE' from XML file.",valc); }
}
if (!strcmp(namec, "FAH")) {
  FAH = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'FAH' from XML file.",valc); }
}
if (!strcmp(namec, "CONFSTRESS")) {
  CONFSTRESS = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'CONFSTRESS' from XML file.",valc); }
}
if (!strcmp(namec, "FORCEFA")) {
FORCEFA = strtobool(valc);
}
if (!strcmp(namec, "LAMBDAFORCEFA")) {
  LAMBDAFORCEFA = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'LAMBDAFORCEFA' from XML file.",valc); }
}
if (!strcmp(namec, "LAMBDAACTIN")) {
  LAMBDAACTIN = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'LAMBDAACTIN' from XML file.",valc); }
}
if (!strcmp(namec, "ACTIN")) {
ACTIN = strtobool(valc);
}
if (!strcmp(namec, "COLLAGEN")) {
  COLLAGEN = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'COLLAGEN' from XML file.",valc); }
}
if (!strcmp(namec, "COLLAGENSPEED")) {
  COLLAGENSPEED = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'COLLAGENSPEED' from XML file.",valc); }
}
if (!strcmp(namec, "PDEdt")) {
  PDEdt = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'PDEdt' from XML file.",valc); }
}
if (!strcmp(namec, "PDEREPEAT")) {
  PDEREPEAT = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'PDEREPEAT' from XML file.",valc); }
}
if (!strcmp(namec, "CAPACITYFA")) {
  CAPACITYFA = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'CAPACITYFA' from XML file.",valc); }
}
if (!strcmp(namec, "BASEFA")) {
  BASEFA = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'BASEFA' from XML file.",valc); }
}
if (!strcmp(namec, "GROWTHFA")) {
  GROWTHFA = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'GROWTHFA' from XML file.",valc); }
}
if (!strcmp(namec, "LOGISTICPAR")) {
  LOGISTICPAR = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'LOGISTICPAR' from XML file.",valc); }
}
if (!strcmp(namec, "CATCHTENSION")) {
  CATCHTENSION = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'CATCHTENSION' from XML file.",valc); }
}
if (!strcmp(namec, "SLIPTENSION")) {
  SLIPTENSION = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'SLIPTENSION' from XML file.",valc); }
}
if (!strcmp(namec, "PIXPERVOX")) {
  PIXPERVOX = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'PIXPERVOX' from XML file.",valc); }
}
if (!strcmp(namec, "LINEWIDTH")) {
  LINEWIDTH = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'LINEWIDTH' from XML file.",valc); }
}
if (!strcmp(namec, "STRIDE")) {
  STRIDE = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'STRIDE' from XML file.",valc); }
}
if (!strcmp(namec, "WSTRIDE")) {
  WSTRIDE = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'WSTRIDE' from XML file.",valc); }
}
if (!strcmp(namec, "COLLAGENFIELD")) {
COLLAGENFIELD = strtobool(valc);
}
if (!strcmp(namec, "STRAINFIELD")) {
STRAINFIELD = strtobool(valc);
}
if (!strcmp(namec, "STRESSFIELD")) {
STRESSFIELD = strtobool(valc);
}
if (!strcmp(namec, "HYDSTRESS")) {
HYDSTRESS = strtobool(valc);
}
if (!strcmp(namec, "STRESSTENSOR")) {
STRESSTENSOR = strtobool(valc);
}
if (!strcmp(namec, "TRACTIONSTRESSFIELD")) {
TRACTIONSTRESSFIELD = strtobool(valc);
}
if (!strcmp(namec, "FORCEFIELD")) {
FORCEFIELD = strtobool(valc);
}
if (!strcmp(namec, "TENSIONFIELD")) {
TENSIONFIELD = strtobool(valc);
}
if (!strcmp(namec, "MAXFORCE")) {
  MAXFORCE = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'MAXFORCE' from XML file.",valc); }
}
if (!strcmp(namec, "DEFORMFIELD")) {
DEFORMFIELD = strtobool(valc);
}
if (!strcmp(namec, "MAXDEFORM")) {
  MAXDEFORM = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'MAXDEFORM' from XML file.",valc); }
}
if (!strcmp(namec, "FAFIELD")) {
FAFIELD = strtobool(valc);
}
if (!strcmp(namec, "FACOLOUR")) {
FACOLOUR = strtobool(valc);
}
if (!strcmp(namec, "MAXFA")) {
  MAXFA = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'MAXFA' from XML file.",valc); }
}
if (!strcmp(namec, "PRINCFIELD")) {
PRINCFIELD = strtobool(valc);
}
if (!strcmp(namec, "CELLCOLOUR")) {
CELLCOLOUR = strtobool(valc);
}
if (!strcmp(namec, "ONECELL")) {
ONECELL = strtobool(valc);
}
if (!strcmp(namec, "TWOCELL")) {
TWOCELL = strtobool(valc);
}
if (!strcmp(namec, "DISTWOCELLS")) {
  DISTWOCELLS = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'DISTWOCELLS' from XML file.",valc); }
}
if (!strcmp(namec, "CELLCOL")) {
CELLCOL = strtobool(valc);
}
if (!strcmp(namec, "READCELLS")) {
READCELLS = strtobool(valc);
}
if (!strcmp(namec, "CELLDENSITY")) {
  CELLDENSITY = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'CELLDENSITY' from XML file.",valc); }
}
if (!strcmp(namec, "CELLDIS")) {
  CELLDIS = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'CELLDIS' from XML file.",valc); }
}
if (!strcmp(namec, "BOUNDARYDIS")) {
  BOUNDARYDIS = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'BOUNDARYDIS' from XML file.",valc); }
}
if (!strcmp(namec, "FORBIDDENZONE")) {
  FORBIDDENZONE = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'FORBIDDENZONE' from XML file.",valc); }
}
if (!strcmp(namec, "PATTERN")) {
PATTERN = strtobool(valc);
}
if (!strcmp(namec, "PATTERNC")) {
  PATTERNC = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'PATTERNC' from XML file.",valc); }
}
if (!strcmp(namec, "DUROTAXIS")) {
DUROTAXIS = strtobool(valc);
}
if (!strcmp(namec, "GRADIENT")) {
  GRADIENT = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'GRADIENT' from XML file.",valc); }
}
if (!strcmp(namec, "NRcf")) {
  NRcf = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'NRcf' from XML file.",valc); }
}
if (!strcmp(namec, "COLORBAR")) {
COLORBAR = strtobool(valc);
}
if (!strcmp(namec, "MAXCOLORBARSTRAIN")) {
  MAXCOLORBARSTRAIN = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'MAXCOLORBARSTRAIN' from XML file.",valc); }
}
if (!strcmp(namec, "MAXCOLORBARDENS")) {
  MAXCOLORBARDENS = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'MAXCOLORBARDENS' from XML file.",valc); }
}
if (!strcmp(namec, "MAXCOLORBARSTRESS")) {
  MAXCOLORBARSTRESS = standardlocale.toDouble(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to double while reading parameter 'MAXCOLORBARSTRESS' from XML file.",valc); }
}
if (!strcmp(namec, "WIDTHCOLORBAR")) {
  WIDTHCOLORBAR = standardlocale.toInt(valc, &ok);
  if (!ok) { MyWarning::error("Read error: cannot convert string \"%s\" to integer while reading parameter 'WIDTHCOLORBAR' from XML file.",valc); }
}
if (!strcmp(namec, "WRATIOPA")) {
WRATIOPA = strtobool(valc);
}
if (!strcmp(namec, "WLENGTH")) {
WLENGTH = strtobool(valc);
}
if (!strcmp(namec, "WAREA")) {
WAREA = strtobool(valc);
}
if (!strcmp(namec, "WSQDIS")) {
WSQDIS = strtobool(valc);
}
if (!strcmp(namec, "WECC")) {
WECC = strtobool(valc);
}
if (!strcmp(namec, "WANGLE")) {
WANGLE = strtobool(valc);
}
if (!strcmp(namec, "WSIGMA")) {
WSIGMA = strtobool(valc);
}
if (!strcmp(namec, "WTOTSHAPE")) {
WTOTSHAPE = strtobool(valc);
}
if (!strcmp(namec, "WFA")) {
WFA = strtobool(valc);
}
if (!strcmp(namec, "WTWOCELLCONTACT")) {
WTWOCELLCONTACT = strtobool(valc);
}
if (!strcmp(namec, "WTWOCELLANGLECM")) {
WTWOCELLANGLECM = strtobool(valc);
}
}
*/void Parameter::AssignValArrayToPar(const char *namec, vector<double> valarray) {
}

ostream &operator<<(ostream &os, Parameter &p) {
    p.Write(os);
    return os;
}

